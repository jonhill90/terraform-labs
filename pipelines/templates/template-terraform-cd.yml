parameters:
  - name: team
    type: string
  - name: artifactName
    type: string
  - name: environments
    type: object
  - name: variableGroup
    type: string  # Variable Group Name
  - name: backendServiceArm
    type: string  # Backend Service Connection

trigger: none

resources:
  pipelines:
    - pipeline: ${{ parameters.team }}-CI
      source: ${{ parameters.team }}-CI
      trigger:
        branches:
          - main

pool:
  name: 'Lab'

variables:
  - group: ${{ parameters.variableGroup }}  # üîπ Attach the variable group that pulls secrets from Key Vault
  - name: artifactName
    value: ${{ parameters.artifactName }}

stages:
  - ${{ each env in parameters.environments }}:
      - stage: Plan${{ env }}
        displayName: 'Terraform Plan - ${{ env }}'
        dependsOn: []
        pool:
          vmImage: 'ubuntu-latest'
        jobs:
          - deployment: Terraform_Deploy
            condition: succeeded()
            displayName: Terraform Init, Plan & Apply
            environment: ${{ env }}
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self

                    # Debug step to verify Terraform installation
                    - script: |
                        echo "üîç Checking Terraform installation..."
                        terraform --version || echo "‚ùå Terraform not found!"
                        which terraform || echo "‚ùå Terraform path not found!"
                      displayName: "Debug: Verify Terraform Installation"

                    - task: TerraformInstaller@1
                      displayName: 'Install Terraform'
                      inputs:
                        terraformVersion: "latest"

                    # Manually ensure Terraform path is correct
                    - script: |
                        export PATH=$PATH:/home/azureuser/myagent/_work/_tool/terraform/1.11.1/x64
                        echo "Updated PATH: $PATH"
                        terraform --version
                      displayName: "Fix: Manually Add Terraform to PATH and Verify"

                    - task: TerraformTaskV2@2
                      displayName: 'Terraform Init - ${{ env }}'
                      inputs:
                        command: "init"
                        backendType: "azurerm"
                        backendServiceArm: ${{ parameters.backendServiceArm }}
                        backendAzureRmResourceGroupName: "$(backendResourceGroup)"
                        backendAzureRmStorageAccountName: "$(backendStorageAccount)"
                        backendAzureRmContainerName: "$(backendContainer)"
                        backendAzureRmKey: "$(team)/${{ env }}.tfstate"

                    - task: TerraformTaskV2@2
                      displayName: 'Terraform Validate - ${{ env }}'
                      inputs:
                        command: "validate"
                        provider: "azurerm"

                    - task: TerraformTaskV2@2
                      displayName: 'Terraform Plan - ${{ env }}'
                      inputs:
                        command: "plan"
                        provider: "azurerm"
                        commandOptions: "-var environment=${{ env }} -var tenant_id=$(tenantid) -var subscription_id=$(subscriptionid) -refresh=false -out=${{ env }}-tfplan -input=false -no-color -detailed-exitcode"

                    - task: PublishBuildArtifacts@1
                      displayName: 'Publish Terraform Plan - ${{ env }}'
                      inputs:
                        pathToPublish: '$(System.DefaultWorkingDirectory)/${{ env }}-tfplan'
                        artifactName: '${{ env }}-tfplan'

      - stage: Apply${{ env }}
        displayName: 'Terraform Apply - ${{ env }}'
        dependsOn: Plan${{ env }}
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        jobs:
          - deployment: Terraform_Deploy
            condition: succeeded()
            displayName: Terraform Apply - ${{ env }}
            environment: ${{ env }}
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self

                    - task: TerraformTaskV2@2
                      displayName: 'Terraform Apply - ${{ env }}'
                      inputs:
                        command: "apply"
                        provider: "azurerm"
                        commandOptions: "-auto-approve ${{ env }}-tfplan"

                    - task: AzureCLI@2
                      displayName: 'Release Azure Blob Lock'
                      condition: canceled()
                      inputs:
                        azureSubscription: ${{ parameters.backendServiceArm }}
                        scriptType: "pscore"
                        scriptLocation: "inlineScript"
                        inlineScript: |
                          $blob = az storage blob show --account-name "$(backendStorageAccount)" -c "$(backendContainer)" --name "$(team)/${{ env }}.tfstate" | ConvertFrom-Json
                          if ( (($blob.properties).lease).state -eq 'leased' )
                          {
                            az storage blob lease break --account-name "$(backendStorageAccount)" -c "$(backendContainer)" -b "$(team)/${{ env }}.tfstate"
                          }