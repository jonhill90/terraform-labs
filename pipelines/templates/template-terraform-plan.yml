parameters:
  - name: team
    type: string
  - name: artifactName
    type: string
  - name: variableGroup
    type: string
  - name: backendServiceArm
    type: string
  - name: environmentName
    type: string
  - name: stageName
    type: string
  - name: stageDisplayName
    type: string
  - name: workingDirectory
    type: string
  - name: agentPool
    type: string
  - name: pipeline
    type: string

stages:
  - stage: ${{ parameters.stageName }}
    displayName: "Terraform Plan - ${{ parameters.stageDisplayName }}"
    pool:
      name: ${{ parameters.agentPool }} # ‚úÖ Uses the passed-in agent pool
    variables:
      - group: ${{ parameters.variableGroup }} # ‚úÖ Pull secrets from Key Vault

    jobs:
      - deployment: Terraform_Plan
        displayName: "Terraform Init & Plan - ${{ parameters.stageDisplayName }}"
        environment: ${{ parameters.environmentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                
                - script: |
                    echo "üîç Debugging Working Directory Parameter"
                    echo "workingDirectory: '${{ parameters.workingDirectory }}'"
                    echo "üîç Checking actual directory:"
                    ls -la "${{ parameters.workingDirectory }}"
                  displayName: "Debug: Verify Working Directory Parameter"

                - script: |
                    echo "üîç Debugging Artifact Variables"
                    echo "Artifact Name: '${{ parameters.artifactName }}'"
                    echo "Pipeline: '${{ parameters.pipeline }}'"
                    echo "üîç Listing contents of $(Pipeline.Workspace)"
                    ls -la "$(Pipeline.Workspace)"
                    echo "Download Path: '$(Pipeline.Workspace)'"
                  displayName: "Debug: Verify Artifact Variables"

                # ‚úÖ Ensure Terraform is installed
                - task: TerraformInstaller@1
                  displayName: "Install Terraform"
                  inputs:
                    terraformVersion: "latest"

                - script: |
                    echo "üîç Checking Terraform installation..."
                    ls -la /home/azureuser/myagent/_work/_tool/terraform/
                    ls -la /home/azureuser/myagent/_work/_tool/terraform/1.11.1/x64/
                    which terraform
                    terraform version
                  displayName: "Debug: Verify Terraform Installation"

                - script: |
                    echo "üîç Checking PATH Variable..."
                    echo $PATH
                  displayName: "Debug: Check PATH Variable"

                - script: |
                    export PATH=$PATH:/home/azureuser/myagent/_work/_tool/terraform/1.11.1/x64/
                    echo "Updated PATH: $PATH"
                  displayName: "Fix: Update PATH Variable"

                - script: |
                    if [ -z "$(backendContainer)" ] || [ -z "$(backendStorageAccount)" ] || [ -z "$(backendResourceGroup)" ]; then
                        echo "‚ùå ERROR: One or more backend variables are missing!"
                        exit 1
                    fi
                  displayName: "Validate Backend Variables"

                - script: |
                    echo "üîç Debugging Backend Variables"
                    echo "backendContainer: '$(backendContainer)'"
                    echo "backendStorageAccount: '$(backendStorageAccount)'"
                    echo "backendResourceGroup: '$(backendResourceGroup)'"
                  displayName: "Debug: Confirm Backend Variables"

                - script: |
                    echo "üîç Running Terraform Init WITHOUT Backend to Isolate Issue..."
                    WORK_DIR="$(Pipeline.Workspace)/${{ parameters.artifactName }}/azure-lab/security"
                    echo "Using Working Directory: $WORK_DIR"
                    cd "$WORK_DIR"
                    echo "Current Directory: $(pwd)"
                    ls -la
                    terraform init -input=false
                  displayName: "Debug: Terraform Init Without Backend"

                - script: |
                    echo "üîç Listing all files and folders in working directory: ${{ parameters.workingDirectory }}"
                    ls -la "${{ parameters.workingDirectory }}"
                  displayName: "Debug: List Files in Working Directory"

                # ‚úÖ Initialize Terraform backend
                - task: TerraformTaskV4@4
                  displayName: "Terraform Init - ${{ parameters.stageDisplayName }}"
                  inputs:
                    command: "init"
                    backendType: "azurerm"
                    backendServiceArm: ${{ parameters.backendServiceArm }}
                    backendAzureRmResourceGroupName: "$(backendResourceGroup)"
                    backendAzureRmStorageAccountName: "$(backendStorageAccount)"
                    backendAzureRmContainerName: "$(backendContainer)"
                    backendAzureRmKey: "$(team)/${{ parameters.environmentName }}.tfstate"
                    workingDirectory: "${{ parameters.workingDirectory }}"

                # ‚úÖ Validate Terraform configuration
                - task: TerraformTaskV4@4
                  displayName: "Terraform Validate - ${{ parameters.stageDisplayName }}"
                  inputs:
                    command: "validate"
                    provider: "azurerm"
                    workingDirectory: "${{ parameters.workingDirectory }}"

                # ‚úÖ Run Terraform plan
                - task: TerraformTaskV4@4
                  displayName: "Terraform Plan - ${{ parameters.stageDisplayName }}"
                  inputs:
                    command: "plan"
                    provider: "azurerm"
                    environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
                    commandOptions: "-var environment=${{ parameters.environmentName }} -var tenant_id=$(tenantid) -var subscription_id=$(subscriptionid) -refresh=false -out=${{ parameters.environmentName }}-tfplan -input=false -no-color -detailed-exitcode"
                    workingDirectory: "${{ parameters.workingDirectory }}"