parameters:
  - name: team
    type: string
  - name: artifactName
    type: string
  - name: variableGroup
    type: string
  - name: backendServiceArm
    type: string
  - name: environmentName
    type: string
  - name: stageName
    type: string
  - name: stageDisplayName
    type: string
  - name: workingDirectory
    type: string
  - name: agentPool
    type: string  # ✅ Configurable from the calling pipeline

stages:
  - stage: ${{ parameters.stageName }}
    displayName: 'Terraform Plan - ${{ parameters.stageDisplayName }}'
    pool:
      name: ${{ parameters.agentPool }}  # ✅ Uses the passed-in agent pool
    variables:
      - group: ${{ parameters.variableGroup }}  # ✅ Pull secrets from Key Vault
    jobs:
      - deployment: Terraform_Plan
        displayName: 'Terraform Init & Plan - ${{ parameters.stageDisplayName }}'
        environment: ${{ parameters.environmentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                # ✅ Debug Step: Log system info & Terraform path
                - script: |
                    echo "🔍 Debugging Information"
                    echo "🏗️  Agent Name: $(Agent.Name)"
                    echo "🔧 Agent Machine Name: $(Agent.MachineName)"
                    echo "💾 Working Directory: ${{ parameters.workingDirectory }}"
                    echo "📦 Terraform Version:"
                    terraform version || echo "⚠️ Terraform not found!"
                    echo "🛠️ Terraform Path:"
                    which terraform || echo "⚠️ Terraform binary not found!"
                    echo "🌎 Environment Variables:"
                    env | grep -i terraform
                    echo "🔑 Service Connection: ${{ parameters.backendServiceArm }}"
                  displayName: "Debug: Log Environment & Terraform Path"
                  failOnStderr: false
                  continueOnError: true

                # ✅ Ensure Terraform is installed
                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: "latest"

                # ✅ Initialize Terraform backend
                - task: TerraformTaskV2@2
                  displayName: 'Terraform Init - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "init"
                    backendType: "azurerm"
                    backendServiceArm: ${{ parameters.backendServiceArm }}  # ✅ Fixed!
                    backendAzureRmResourceGroupName: "$(backendResourceGroup)"
                    backendAzureRmStorageAccountName: "$(backendStorageAccount)"
                    backendAzureRmContainerName: "$(backendContainer)"
                    backendAzureRmKey: "$(team)/${{ parameters.environmentName }}.tfstate"
                    workingDirectory: ${{ parameters.workingDirectory }}

                # ✅ Validate Terraform configuration
                - task: TerraformTaskV2@2
                  displayName: 'Terraform Validate - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "validate"
                    provider: "azurerm"
                    workingDirectory: ${{ parameters.workingDirectory }}

                # ✅ Run Terraform plan
                - task: TerraformTaskV2@2
                  displayName: 'Terraform Plan - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "plan"
                    provider: "azurerm"
                    commandOptions: "-var environment=${{ parameters.environmentName }} -var tenant_id=$(tenantid) -var subscription_id=$(subscriptionid) -refresh=false -out=${{ parameters.environmentName }}-tfplan -input=false -no-color -detailed-exitcode"
                    workingDirectory: ${{ parameters.workingDirectory }}