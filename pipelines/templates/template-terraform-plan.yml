parameters:
  - name: team
    type: string
  - name: artifactName
    type: string
  - name: variableGroup
    type: string
  - name: backendServiceArm
    type: string
  - name: environmentName
    type: string
  - name: stageName
    type: string
  - name: stageDisplayName
    type: string
  - name: workingDirectory
    type: string
  - name: agentPool
    type: string 
  - name: pipeline
    type: string 

stages:
  - stage: ${{ parameters.stageName }}
    displayName: 'Terraform Plan - ${{ parameters.stageDisplayName }}'
    pool:
      name: ${{ parameters.agentPool }}  # ‚úÖ Uses the passed-in agent pool
    variables:
      - group: ${{ parameters.variableGroup }}  # ‚úÖ Pull secrets from Key Vault
    jobs:
      - deployment: Terraform_Plan
        displayName: 'Terraform Init & Plan - ${{ parameters.stageDisplayName }}'
        environment: ${{ parameters.environmentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                # ‚úÖ Download Terraform Artifacts
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download Terraform Artifacts'
                  inputs:
                    buildType: 'specific'
                    project: "$(System.TeamProject)"
                    pipeline: "${{ parameters.pipeline }}"
                    artifactName: "$(artifactName)"
                    buildVersionToDownload: "latest"
                    downloadPath: "$(Pipeline.Workspace)"

                # ‚úÖ Debug: Verify Working Directory
                - script: |
                    echo "üîç Debugging Working Directory"
                    echo "Current Working Directory: $(pwd)"
                    ls -la
                  displayName: 'Debug: Verify Working Directory'

                - script: |
                    echo "üîç Debugging Artifact Variables"
                    echo "Artifact Name: $(artifactName)"
                    echo "Pipeline: $(pipeline)"
                    echo "Download Path: $(Pipeline.Workspace)"
                  displayName: 'Debug: Verify Artifact Variables'

                # ‚úÖ Initialize Terraform backend
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Init - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "init"
                    backendType: "azurerm"
                    backendServiceArm: ${{ parameters.backendServiceArm }}
                    backendAzureRmResourceGroupName: "$(backendResourceGroup)"
                    backendAzureRmStorageAccountName: "$(backendStorageAccount)"
                    backendAzureRmContainerName: "$(backendContainer)"
                    backendAzureRmKey: "$(team)/${{ parameters.environmentName }}.tfstate"
                    workingDirectory: "$(Pipeline.Workspace)/$(artifactName)/$(team)"

                # ‚úÖ Validate Terraform configuration
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Validate - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "validate"
                    provider: "azurerm"
                    workingDirectory: "$(Pipeline.Workspace)/$(artifactName)/$(team)"

                # ‚úÖ Run Terraform plan
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Plan - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "plan"
                    provider: "azurerm"
                    commandOptions: "-var environment=${{ parameters.environmentName }} -var tenant_id=$(tenantid) -var subscription_id=$(subscriptionid) -refresh=false -out=${{ parameters.environmentName }}-tfplan -input=false -no-color -detailed-exitcode"
                    workingDirectory: "$(Pipeline.Workspace)/$(artifactName)/$(team)"