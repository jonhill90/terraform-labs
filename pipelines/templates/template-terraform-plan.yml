parameters:
  - name: team
    type: string
  - name: artifactName
    type: string
  - name: environments
    type: object
  - name: variableGroup
    type: string  # Variable Group Name
  - name: backendServiceArm
    type: string  # Optional backend service connection

trigger: none  # Runs only when explicitly triggered

resources:
  pipelines:
    - pipeline: ${{ parameters.team }}-CI
      source: ${{ parameters.team }}-CI
      trigger:
        branches:
          - main

pool:
  name: 'Lab'

variables:
  - group: ${{ parameters.variableGroup }}  # Pulls secrets from Key Vault
  - name: artifactName
    value: ${{ parameters.artifactName }}
  - name: backendServiceArm
    value: ${{ coalesce(parameters.backendServiceArm, 'Default-Terraform-Service-Connection') }}

stages:
  - ${{ each env in parameters.environments }}:
      - stage: Plan${{ env }}
        displayName: 'Terraform Plan - ${{ env }}'
        dependsOn: []
        pool:
          vmImage: 'ubuntu-latest'
        jobs:
          - deployment: Terraform_Plan
            condition: succeeded()
            displayName: 'Terraform Init & Plan - ${{ env }}'
            environment: ${{ env }}
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self

                    - task: TerraformInstaller@1
                      displayName: 'Install Terraform'
                      inputs:
                        terraformVersion: "latest"

                    - task: TerraformCLI@1
                      displayName: 'Terraform Init - ${{ env }}'
                      inputs:
                        command: "init"
                        backendType: "azurerm"
                        backendServiceArm: "$(backendServiceArm)"
                        backendAzureRmResourceGroupName: "$(backendResourceGroup)"
                        backendAzureRmStorageAccountName: "$(backendStorageAccount)"
                        backendAzureRmContainerName: "$(backendContainer)"
                        backendAzureRmKey: "$(team)/${{ env }}.tfstate"

                    - task: TerraformCLI@1
                      displayName: 'Terraform Validate - ${{ env }}'
                      inputs:
                        command: "validate"
                        provider: "azurerm"

                    - task: TerraformCLI@1
                      displayName: 'Terraform Plan - ${{ env }}'
                      inputs:
                        command: "plan"
                        provider: "azurerm"
                        commandOptions: "-var environment=${{ env }} -var tenant_id=$(tenantid) -var subscription_id=$(subscriptionid) -refresh=false -out=${{ env }}-tfplan -input=false -no-color -detailed-exitcode"

                    - task: PublishBuildArtifacts@1
                      displayName: 'Publish Terraform Plan - ${{ env }}'
                      inputs:
                        pathToPublish: '$(System.DefaultWorkingDirectory)/${{ env }}-tfplan'
                        artifactName: '${{ env }}-tfplan'