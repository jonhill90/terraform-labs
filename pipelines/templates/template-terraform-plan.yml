parameters:
  - name: team
    type: string
  - name: artifactName
    type: string
  - name: variableGroup
    type: string
  - name: backendServiceArm
    type: string
  - name: environmentName
    type: string
  - name: stageName
    type: string
  - name: stageDisplayName
    type: string
  - name: workingDirectory
    type: string
  - name: agentPool
    type: string 
  - name: pipeline
    type: string 

stages:
  - stage: ${{ parameters.stageName }}
    displayName: 'Terraform Plan - ${{ parameters.stageDisplayName }}'
    pool:
      name: ${{ parameters.agentPool }}  # ‚úÖ Uses the passed-in agent pool
    variables:
      - group: ${{ parameters.variableGroup }}  # ‚úÖ Pull secrets from Key Vault
      - name: backendResourceGroup
        value: $(backendResourceGroup)
      - name: backendStorageAccount
        value: $(backendStorageAccount)
      - name: backendContainer
        value: $(backendContainer)
    jobs:
      - deployment: Terraform_Plan
        displayName: 'Terraform Init & Plan - ${{ parameters.stageDisplayName }}'
        environment: ${{ parameters.environmentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - script: |
                    echo "üîç Debugging Artifact Variables"
                    echo "Artifact Name: '${{ parameters.artifactName }}'"
                    echo "Pipeline: '${{ parameters.pipeline }}'"
                    echo "Download Path: '$(Pipeline.Workspace)'"
                  displayName: "Debug: Verify Artifact Variables"

                - script: |
                    echo "üîç Listing contents of $(Pipeline.Workspace)/${{ parameters.artifactName }}/$(team)"
                    ls -la "$(Pipeline.Workspace)/${{ parameters.artifactName }}/$(team)"
                  displayName: "Debug: Verify Downloaded Artifacts"
                  
                # ‚úÖ Ensure Terraform is installed
                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: "latest"

                - script: |
                    echo "üîç Checking Terraform installation..."
                    ls -la /home/azureuser/myagent/_work/_tool/terraform/
                    ls -la /home/azureuser/myagent/_work/_tool/terraform/1.11.1/x64/
                    which terraform
                    terraform version
                  displayName: "Debug: Verify Terraform Installation"

                - script: |
                    echo "üîç Checking PATH Variable..."
                    echo $PATH
                  displayName: "Debug: Check PATH Variable"

                - script: |
                    export PATH=$PATH:/home/azureuser/myagent/_work/_tool/terraform/1.11.1/x64/
                    echo "Updated PATH: $PATH"
                  displayName: "Fix: Update PATH Variable"

                - script: |
                    echo "üîç Debugging Backend Variables"
                    echo "Storage Account: $(backendStorageAccount)"
                    echo "Container Name: $(backendContainer)"
                    echo "Resource Group: $(backendResourceGroup)"
                    echo "Subscription ID: $(subscriptionid)"
                    echo "Tenant ID: $(tenantid)"
                    echo "Client ID: $(clientid)"
                    echo "Client Secret: [REDACTED]"
                  displayName: "Debug: Check Backend Variables (Sanitized)"

                - script: |
                    if [[ -z "$(backendStorageAccount)" || -z "$(backendContainer)" || -z "$(backendResourceGroup)" || -z "$(subscriptionid)" || -z "$(tenantid)" ]]; then
                      echo "‚ùå ERROR: One or more required backend variables are missing!"
                      exit 1
                    else
                      echo "‚úÖ All backend variables are set."
                    fi
                  displayName: "Pre-check: Validate Terraform Backend Variables"

                - script: |
                    echo "üîç Running Terraform Init with the following backend config:"
                    echo "storage_account_name=$(backendStorageAccount)"
                    echo "container_name=$(backendContainer)"
                    echo "key=$(team)/lab.***"
                    echo "resource_group_name=$(backendResourceGroup)"
                    echo "subscription_id=$(subscriptionid)"
                    echo "tenant_id=$(tenantid)"
                    echo "client_id=$(clientid)"
                    echo "client_secret=[REDACTED]"
                  displayName: "Debug: Show Terraform Backend Config Before Init"

                # ‚úÖ Initialize Terraform backend
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Init - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "init"
                    backendType: "azurerm"
                    backendServiceArm: ${{ parameters.backendServiceArm }}
                    backendAzureRmResourceGroupName: "$(backendResourceGroup)"
                    backendAzureRmStorageAccountName: "$(backendStorageAccount)"
                    backendAzureRmContainerName: "$(backendContainer)"
                    backendAzureRmKey: "$(team)/${{ parameters.environmentName }}.tfstate"
                    workingDirectory: "$(Pipeline.Workspace)/${{ parameters.artifactName }}/$(team)"

                # ‚úÖ Validate Terraform configuration
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Validate - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "validate"
                    provider: "azurerm"
                    workingDirectory: "$(Pipeline.Workspace)/${{ parameters.artifactName }}/$(team)"

                # ‚úÖ Run Terraform plan
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Plan - ${{ parameters.stageDisplayName }}'
                  inputs:
                    command: "plan"
                    provider: "azurerm"
                    commandOptions: "-var environment=${{ parameters.environmentName }} -var tenant_id=$(tenantid) -var subscription_id=$(subscriptionid) -refresh=false -out=${{ parameters.environmentName }}-tfplan -input=false -no-color -detailed-exitcode"
                    workingDirectory: "$(Pipeline.Workspace)/${{ parameters.artifactName }}/$(team)"