parameters:
  - name: team
    type: string
  - name: artifactName
    type: string
  - name: variableGroup
    type: string
  - name: backendServiceArm
    type: string
  - name: environmentName
    type: string
  - name: stageName
    type: string
  - name: stageDisplayName
    type: string
  - name: workingDirectory
    type: string
  - name: agentPool
    type: string
  - name: pipeline
    type: string
  - name: dependsOn
    type: object
    default: []  # Default to an empty list if not provided

stages:
  - stage: ${{ parameters.stageName }}
    displayName: "Terraform Plan - ${{ parameters.stageDisplayName }}"
    dependsOn: ${{ parameters.dependsOn }} # ✅ Dynamically set dependencies
    pool:
      name: ${{ parameters.agentPool }} # ✅ Uses the passed-in agent pool
    variables:
      - group: ${{ parameters.variableGroup }} # ✅ Pull secrets from Key Vault

    jobs:
      - deployment: Terraform_Plan
        displayName: "Terraform Init & Plan - ${{ parameters.stageDisplayName }}"
        environment: ${{ parameters.environmentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                # ✅ Ensure Terraform is installed
                - task: TerraformInstaller@1
                  displayName: "Install Terraform"
                  inputs:
                    terraformVersion: "latest"

                # ✅ Initialize Terraform backend
                - task: TerraformTaskV4@4
                  displayName: "Terraform Init - ${{ parameters.stageDisplayName }}"
                  inputs:
                    command: "init"
                    backendType: "azurerm"
                    backendServiceArm: ${{ parameters.backendServiceArm }}
                    backendAzureRmResourceGroupName: "$(backendResourceGroup)"
                    backendAzureRmStorageAccountName: "$(backendStorageAccount)"
                    backendAzureRmContainerName: "$(backendContainer)"
                    backendAzureRmKey: "${{ parameters.team }}/${{ parameters.environmentName }}.tfstate"
                    workingDirectory: "${{ parameters.workingDirectory }}"

                # ✅ Validate Terraform configuration
                - task: TerraformTaskV4@4
                  displayName: "Terraform Validate - ${{ parameters.stageDisplayName }}"
                  inputs:
                    command: "validate"
                    provider: "azurerm"
                    workingDirectory: "${{ parameters.workingDirectory }}"
              
                - task: replacetokens@6
                  displayName: "Replace Tokens in Terraform tfvars File"
                  inputs:
                    targetFiles: "${{ parameters.workingDirectory }}/env/${{ parameters.environmentName }}.tfvars"
                    tokenPattern: "custom"
                    tokenPrefix: "__"
                    tokenSuffix: "__"
                    actionOnMissing: "warn"
                    keepToken: false

                # ✅ Run Terraform plan
                - task: TerraformTaskV4@4
                  displayName: "Terraform Plan - ${{ parameters.stageDisplayName }}"
                  inputs:
                    command: "plan"
                    provider: "azurerm"
                    environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
                    commandOptions: "-var-file=${{ parameters.workingDirectory }}/env/${{ parameters.environmentName }}.tfvars -out=tfplan"
                    workingDirectory: "${{ parameters.workingDirectory }}"
                    
                # ✅ Apply Terraform changes
                - task: TerraformTaskV4@4
                  displayName: "Terraform Apply - ${{ parameters.stageDisplayName }}"
                  inputs:
                    command: "apply"
                    provider: "azurerm"
                    environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
                    commandOptions: "-auto-approve tfplan"
                    workingDirectory: "${{ parameters.workingDirectory }}"

                # ✅ Cleanup Step After Plan
                - task: Bash@3
                  displayName: "Force Cleanup of Working Directory Contents"
                  condition: always()
                  inputs:
                    targetType: "inline"
                    script: |
                      echo "Deleting all contents inside: ${{ parameters.workingDirectory }}"
                      rm -rf ${{ parameters.workingDirectory }}/* ${{ parameters.workingDirectory }}/.[!.]* ${{ parameters.workingDirectory }}/..?*
                      echo "Working directory contents deleted: ${{ parameters.workingDirectory }}"