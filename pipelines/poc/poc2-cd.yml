trigger: none  # Runs only when the CI pipeline triggers it

resources:
  pipelines:
    - pipeline: POC2-CI
      source: POC2-CI
      trigger:
        branches:
          - main

pool:
  name: 'Lab'

variables:
  - name: owner
    value: "Infrastructure and Operations"
  - name: artifactName
    value: "poc2-artifacts"
  - name: teamFolder
    value: "poc2"

# üîπ Plan & Apply for Dev, Test, and Prod

### ‚úÖ Dev Plan & Apply
stages:
- stage: PlanDev
  displayName: 'Plan POC - Dev'
  dependsOn: []
  variables:
    - group: POC-Dev
    - name: environment
      value: dev
    - name: tfvarsFile
      value: "env/dev.tfvars"
  jobs:
    - job: PlanTerraform
      displayName: 'Terraform Plan - Dev'
      steps:
        - task: TerraformInstaller@1
          displayName: 'Ensure Terraform is Installed'
          inputs:
            terraformVersion: 'latest'

        - script: |
            echo "üîê Logging into Azure..."
            az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
            az account set --subscription $(subscriptionid)
            echo "‚úÖ Azure login successful!"
          displayName: 'Azure CLI Login'

        - task: DownloadBuildArtifacts@0
          displayName: 'Download Terraform Artifacts for $(teamFolder)'
          inputs:
            buildType: 'specific'
            project: "$(System.TeamProject)"
            pipeline: "POC2-CI"
            artifactName: "$(artifactName)"
            buildVersionToDownload: "latest"
            downloadPath: "$(Pipeline.Workspace)"

        - script: |
            echo "üìù Generating backend.tf for $(environment)..."
            cat <<EOF > $(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/backend.tf
            terraform {
              backend "azurerm" {
                resource_group_name  = "$(backendResourceGroup)"
                storage_account_name = "$(backendStorageAccount)"
                container_name       = "$(backendContainer)"
                key                  = "$(teamFolder)/$(environment).tfstate"
                subscription_id      = "$(subscriptionid)"
              }
            }
            EOF
            echo "‚úÖ backend.tf generated!"
          displayName: 'Generate Terraform Backend Config'

        - task: replacetokens@6
          displayName: 'Replace Tokens in Terraform tfvars File'
          inputs:
            targetFiles: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)'
            tokenPattern: 'custom'
            tokenPrefix: '__'
            tokenSuffix: '__'
            actionOnMissing: 'warn'
            keepToken: false

        - script: |
            echo "üöÄ Running Terraform Plan for $(environment)"
            terraform version
            terraform init -reconfigure
            terraform plan -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)" -out=tfplan
          displayName: 'Terraform Plan'
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'

- stage: ApplyDev
  displayName: 'Apply POC - Dev'
  dependsOn: [PlanDev]
  variables:
    - group: POC-Dev
    - name: environment
      value: dev
    - name: tfvarsFile
      value: "env/dev.tfvars"
  jobs:
    - job: ApplyTerraform
      displayName: 'Terraform Apply - Dev'
      steps:
        - task: TerraformInstaller@1
          displayName: 'Ensure Terraform is Installed'
          inputs:
            terraformVersion: 'latest'

        - script: |
            echo "üîê Logging into Azure..."
            az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
            az account set --subscription $(subscriptionid)
            echo "‚úÖ Azure login successful!"
          displayName: 'Azure CLI Login'

        - task: DownloadBuildArtifacts@0
          displayName: 'Download Terraform Artifacts for $(teamFolder)'
          inputs:
            buildType: 'specific'
            project: "$(System.TeamProject)"
            pipeline: "POC2-CI"
            artifactName: "$(artifactName)"
            buildVersionToDownload: "latest"
            downloadPath: "$(Pipeline.Workspace)"

        - script: |
            echo "üìù Generating backend.tf for $(environment)..."
            cat <<EOF > $(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/backend.tf
            terraform {
              backend "azurerm" {
                resource_group_name  = "$(backendResourceGroup)"
                storage_account_name = "$(backendStorageAccount)"
                container_name       = "$(backendContainer)"
                key                  = "$(teamFolder)/$(environment).tfstate"
                subscription_id      = "$(subscriptionid)"
              }
            }
            EOF
            echo "‚úÖ backend.tf generated!"
          displayName: 'Generate Terraform Backend Config'

        - task: replacetokens@6
          displayName: 'Replace Tokens in Terraform tfvars File'
          inputs:
            targetFiles: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)'
            tokenPattern: 'custom'
            tokenPrefix: '__'
            tokenSuffix: '__'
            actionOnMissing: 'warn'
            keepToken: false

        - script: |
            echo "üöÄ Running Terraform Apply for $(environment)"
            terraform version
            terraform init -reconfigure
            terraform apply -auto-approve -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)"
          displayName: 'Terraform Apply'
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'

### ‚úÖ Test Plan & Apply
- stage: PlanTest
  displayName: 'Plan POC - Test'
  dependsOn: [ApplyDev]
  variables:
    - group: POC-Test
    - name: environment
      value: test
    - name: tfvarsFile
      value: "env/test.tfvars"
  jobs:
    - job: PlanTerraform
      displayName: 'Terraform Plan - Test'
      steps:
        - task: TerraformInstaller@1
          displayName: 'Ensure Terraform is Installed'
          inputs:
            terraformVersion: 'latest'

        - script: |
            echo "üîê Logging into Azure..."
            az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
            az account set --subscription $(subscriptionid)
            echo "‚úÖ Azure login successful!"
          displayName: 'Azure CLI Login'

        - task: DownloadBuildArtifacts@0
          displayName: 'Download Terraform Artifacts for $(teamFolder)'
          inputs:
            buildType: 'specific'
            project: "$(System.TeamProject)"
            pipeline: "POC2-CI"
            artifactName: "$(artifactName)"
            buildVersionToDownload: "latest"
            downloadPath: "$(Pipeline.Workspace)"

        - script: |
            echo "üìù Generating backend.tf for $(environment)..."
            cat <<EOF > $(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/backend.tf
            terraform {
              backend "azurerm" {
                resource_group_name  = "$(backendResourceGroup)"
                storage_account_name = "$(backendStorageAccount)"
                container_name       = "$(backendContainer)"
                key                  = "$(teamFolder)/$(environment).tfstate"
                subscription_id      = "$(subscriptionid)"
              }
            }
            EOF
            echo "‚úÖ backend.tf generated!"
          displayName: 'Generate Terraform Backend Config'

        - task: replacetokens@6
          displayName: 'Replace Tokens in Terraform tfvars File'
          inputs:
            targetFiles: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)'
            tokenPattern: 'custom'
            tokenPrefix: '__'
            tokenSuffix: '__'
            actionOnMissing: 'warn'
            keepToken: false

        - script: |
            echo "üöÄ Running Terraform Plan for $(environment)"
            terraform version
            terraform init -reconfigure
            terraform plan -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)" -out=tfplan
          displayName: 'Terraform Plan'
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'

- stage: ApplyTest
  displayName: 'Apply POC - Test'
  dependsOn: [PlanTest]
  variables:
    - group: POC-Test
    - name: environment
      value: test
    - name: tfvarsFile
      value: "env/test.tfvars"
  jobs:
    - job: ApplyTerraform
      displayName: 'Terraform Apply - Test'
      steps:
        - task: TerraformInstaller@1
          displayName: 'Ensure Terraform is Installed'
          inputs:
            terraformVersion: 'latest'

        - script: |
            echo "üöÄ Running Terraform Apply for $(environment)"
            terraform version
            terraform init -reconfigure
            terraform apply -auto-approve -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)"
          displayName: 'Terraform Apply'
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'

### ‚úÖ Prod Plan & Apply
- stage: PlanProd
  displayName: 'Plan POC - Prod'
  dependsOn: [ApplyTest]
  variables:
    - group: POC-Prod
    - name: environment
      value: prod
    - name: tfvarsFile
      value: "env/prod.tfvars"
  jobs:
    - job: PlanTerraform
      displayName: 'Terraform Plan - Prod'
      steps:
        - task: TerraformInstaller@1
          displayName: 'Ensure Terraform is Installed'
          inputs:
            terraformVersion: 'latest'

        - script: |
            echo "üîê Logging into Azure..."
            az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
            az account set --subscription $(subscriptionid)
            echo "‚úÖ Azure login successful!"
          displayName: 'Azure CLI Login'

        - task: DownloadBuildArtifacts@0
          displayName: 'Download Terraform Artifacts for $(teamFolder)'
          inputs:
            buildType: 'specific'
            project: "$(System.TeamProject)"
            pipeline: "POC2-CI"
            artifactName: "$(artifactName)"
            buildVersionToDownload: "latest"
            downloadPath: "$(Pipeline.Workspace)"

        - script: |
            echo "üìù Generating backend.tf for $(environment)..."
            cat <<EOF > $(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/backend.tf
            terraform {
              backend "azurerm" {
                resource_group_name  = "$(backendResourceGroup)"
                storage_account_name = "$(backendStorageAccount)"
                container_name       = "$(backendContainer)"
                key                  = "$(teamFolder)/$(environment).tfstate"
                subscription_id      = "$(subscriptionid)"
              }
            }
            EOF
            echo "‚úÖ backend.tf generated!"
          displayName: 'Generate Terraform Backend Config'

        - task: replacetokens@6
          displayName: 'Replace Tokens in Terraform tfvars File'
          inputs:
            targetFiles: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)'
            tokenPattern: 'custom'
            tokenPrefix: '__'
            tokenSuffix: '__'
            actionOnMissing: 'warn'
            keepToken: false

        - script: |
            echo "üöÄ Running Terraform Plan for $(environment)"
            terraform version
            terraform init -reconfigure
            terraform plan -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)" -out=tfplan
          displayName: 'Terraform Plan'
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'

- stage: ApplyProd
  displayName: 'Apply POC - Prod'
  dependsOn: [PlanProd]
  variables:
    - group: POC-Prod
    - name: environment
      value: prod
    - name: tfvarsFile
      value: "env/prod.tfvars"
  jobs:
    - job: ApplyTerraform
      displayName: 'Terraform Apply - Prod'
      steps:
        - task: TerraformInstaller@1
          displayName: 'Ensure Terraform is Installed'
          inputs:
            terraformVersion: 'latest'

        - script: |
            echo "üîê Logging into Azure..."
            az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
            az account set --subscription $(subscriptionid)
            echo "‚úÖ Azure login successful!"
          displayName: 'Azure CLI Login'

        - task: DownloadBuildArtifacts@0
          displayName: 'Download Terraform Artifacts for $(teamFolder)'
          inputs:
            buildType: 'specific'
            project: "$(System.TeamProject)"
            pipeline: "POC2-CI"
            artifactName: "$(artifactName)"
            buildVersionToDownload: "latest"
            downloadPath: "$(Pipeline.Workspace)"

        - script: |
            echo "üìù Generating backend.tf for $(environment)..."
            cat <<EOF > $(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/backend.tf
            terraform {
              backend "azurerm" {
                resource_group_name  = "$(backendResourceGroup)"
                storage_account_name = "$(backendStorageAccount)"
                container_name       = "$(backendContainer)"
                key                  = "$(teamFolder)/$(environment).tfstate"
                subscription_id      = "$(subscriptionid)"
              }
            }
            EOF
            echo "‚úÖ backend.tf generated!"
          displayName: 'Generate Terraform Backend Config'

        - task: replacetokens@6
          displayName: 'Replace Tokens in Terraform tfvars File'
          inputs:
            targetFiles: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)'
            tokenPattern: 'custom'
            tokenPrefix: '__'
            tokenSuffix: '__'
            actionOnMissing: 'warn'
            keepToken: false

        - script: |
            echo "üöÄ Running Terraform Apply for $(environment)"
            terraform version
            terraform init -reconfigure
            terraform apply -auto-approve -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)"
          displayName: 'Terraform Apply'
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'