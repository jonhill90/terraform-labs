trigger: none  # Runs only when the CI pipeline triggers it

resources:
  pipelines:
    - pipeline: POC-CI
      source: POC-CI
      trigger:
        branches:
          - main

pool:
  name: 'Lab'

variables:
  - group: POC
  - name: artifactName
    value: "poc-artifacts"
  - name: teamFolder
    value: "poc"
  - name: tfvarsFile
    value: "env/poc.tfvars"

stages:
  # üîπ Plan Stage
  - stage: PlanPOC
    displayName: 'Plan POC'
    dependsOn: []
    jobs:
      - job: PlanTerraform
        displayName: 'Terraform Plan - POC'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Ensure Terraform is Installed'
            inputs:
              terraformVersion: 'latest'

          - task: PowerShell@2
            displayName: 'Ensure Azure CLI is in PATH'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "üîç Checking Azure CLI Path..."
                $azPath = "C:\Program Files\Microsoft SDKs\Azure\CLI2\wbin"
                if (-Not (Get-Command az -ErrorAction SilentlyContinue)) {
                  Write-Output "‚ö†Ô∏è Azure CLI not found in PATH. Adding it now..."
                  [System.Environment]::SetEnvironmentVariable("Path", "$env:Path;$azPath", [System.EnvironmentVariableTarget]::Process)
                } else {
                  Write-Output "‚úÖ Azure CLI is available."
                }

          - task: PowerShell@2
            displayName: 'Azure CLI Login'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "üîê Logging into Azure..."

                $AZURE_CLIENT_ID = "$(clientid)"
                $AZURE_CLIENT_SECRET = "$(clientsecret)"
                $AZURE_TENANT_ID = "$(tenantid)"
                $AZURE_SUBSCRIPTION_ID = "$(subscriptionid)"

                az login --service-principal --username "$AZURE_CLIENT_ID" --password "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
                az account set --subscription "$AZURE_SUBSCRIPTION_ID"

                Write-Output "‚úÖ Azure login successful!"

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Terraform Artifacts'
            inputs:
              buildType: 'specific'
              project: "$(System.TeamProject)"
              pipeline: "POC-CI"
              artifactName: "$(artifactName)"
              buildVersionToDownload: "latest"
              downloadPath: "$(Pipeline.Workspace)"

          - task: PowerShell@2
            displayName: 'Generate Terraform Backend Config'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "üìù Generating backend.tf..."

                $backendConfig = @"
                terraform {
                  backend "azurerm" {
                    resource_group_name  = "$(backendResourceGroup)"
                    storage_account_name = "$(backendStorageAccount)"
                    container_name       = "$(backendContainer)"
                    key                  = "$(teamFolder)/poc.tfstate"
                    subscription_id      = "$(subscriptionid)"
                  }
                }
                "@

                # Writing backend.tf with UTF-8 encoding (compatible with Windows PowerShell)
                $utf8Encoding = New-Object System.Text.UTF8Encoding $false
                [System.IO.File]::WriteAllLines("$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/backend.tf", $backendConfig, $utf8Encoding)

                Write-Output "‚úÖ backend.tf generated successfully with UTF-8 encoding!"

          - task: replacetokens@6
            displayName: 'Replace Tokens in Terraform tfvars File'
            inputs:
              targetFiles: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)'
              tokenPattern: 'custom'
              tokenPrefix: '__'
              tokenSuffix: '__'
              actionOnMissing: 'warn'
              keepToken: false

          - task: PowerShell@2
            displayName: 'Terraform Plan'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "üöÄ Running Terraform Plan for POC"
                terraform version

                Write-Output "üîÑ Initializing Terraform Backend..."
                terraform init -reconfigure

                Write-Output "üìú Running Terraform Plan..."
                terraform plan -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)" -out=tfplan
              workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'

  # üîπ Apply Stage
  - stage: ApplyPOC
    displayName: 'Apply POC'
    dependsOn: [PlanPOC]  # ‚úÖ Runs only if PlanPOC succeeds
    jobs:
      - job: ApplyTerraform
        displayName: 'Terraform Apply - POC'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Ensure Terraform is Installed'
            inputs:
              terraformVersion: 'latest'

          - task: PowerShell@2
            displayName: 'Azure CLI Login'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "üîê Logging into Azure..."

                $AZURE_CLIENT_ID = "$(clientid)"
                $AZURE_CLIENT_SECRET = "$(clientsecret)"
                $AZURE_TENANT_ID = "$(tenantid)"
                $AZURE_SUBSCRIPTION_ID = "$(subscriptionid)"

                az login --service-principal --username "$AZURE_CLIENT_ID" --password "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
                az account set --subscription "$AZURE_SUBSCRIPTION_ID"

                Write-Output "‚úÖ Azure login successful!"

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Terraform Artifacts'
            inputs:
              buildType: 'specific'
              project: "$(System.TeamProject)"
              pipeline: "POC-CI"
              artifactName: "$(artifactName)"
              buildVersionToDownload: "latest"
              downloadPath: "$(Pipeline.Workspace)"

          - task: PowerShell@2
            displayName: 'Generate Terraform Backend Config'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "üìù Generating backend.tf..."

                $backendConfig = @"
                terraform {
                  backend "azurerm" {
                    resource_group_name  = "$(backendResourceGroup)"
                    storage_account_name = "$(backendStorageAccount)"
                    container_name       = "$(backendContainer)"
                    key                  = "$(teamFolder)/poc.tfstate"
                    subscription_id      = "$(subscriptionid)"
                  }
                }
                "@

                # Writing backend.tf with UTF-8 encoding (compatible with Windows PowerShell)
                $utf8Encoding = New-Object System.Text.UTF8Encoding $false
                [System.IO.File]::WriteAllLines("$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/backend.tf", $backendConfig, $utf8Encoding)

                Write-Output "‚úÖ backend.tf generated successfully with UTF-8 encoding!"

          - task: replacetokens@6
            displayName: 'Replace Tokens in Terraform tfvars File'
            inputs:
              targetFiles: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)'
              tokenPattern: 'custom'
              tokenPrefix: '__'
              tokenSuffix: '__'
              actionOnMissing: 'warn'
              keepToken: false

          - task: PowerShell@2
            displayName: 'Terraform Apply'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "üöÄ Running Terraform Apply for POC"
                terraform version

                Write-Output "üîÑ Initializing Terraform Backend..."
                terraform init -reconfigure

                Write-Output "‚úÖ Applying Terraform Plan..."
                terraform apply -auto-approve -var-file="$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)/$(tfvarsFile)"
              workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/$(teamFolder)'