parameters:
  - name: imageName
    type: string
  - name: artifactName
    type: string
  - name: variableGroup
    type: string
  - name: backendServiceArm
    type: string
  - name: environmentName
    type: string
  - name: stageName
    type: string
  - name: stageDisplayName
    type: string
  - name: workingDirectory
    type: string
  - name: agentPool
    type: string
  - name: pipeline
    type: string
  - name: dependsOn
    type: object
    default: []  # Default to an empty list if not provided
  - name: packerTemplateFile
    type: string  # Required parameter, no default value

stages:
  - stage: ${{ parameters.stageName }}
    displayName: "Packer Build - ${{ parameters.stageDisplayName }}"
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      name: ${{ parameters.agentPool }}

    variables:
      - group: ${{ parameters.variableGroup }}  # Pull secrets from Key Vault

    jobs:
      - deployment: Packer_Build
        displayName: "Packer Build - ${{ parameters.stageDisplayName }}"
        environment: ${{ parameters.environmentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                # ✅ Install Packer (Cross-platform)
                - task: PowerShell@2
                  displayName: "Install Packer (Cross-platform)"
                  inputs:
                    targetType: "inline"
                    script: |
                      $packerInstalled = $false
                      Write-Host "Detecting if Packer is installed..."
                      if ($env:AGENT_OS -eq "Windows_NT") {
                        try {
                          packer -v | Out-Null
                          $packerInstalled = $true
                        } catch {
                          Write-Host "Packer not found on Windows."
                        }

                        if (-not $packerInstalled) {
                          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
                            Write-Host "Chocolatey not found. Installing Chocolatey..."
                            Set-ExecutionPolicy Bypass -Scope Process -Force
                            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
                            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
                          }

                          Write-Host "Installing Packer via Chocolatey..."
                          choco install packer -y --no-progress
                        }
                        else {
                          Write-Host "Packer already installed on Windows."
                        }
                      }
                      else {
                        try {
                          bash -c "packer -v" | Out-Null
                          $packerInstalled = $true
                        } catch {
                          Write-Host "Packer not found on Linux/macOS."
                        }

                        if (-not $packerInstalled) {
                          Write-Host "Installing Packer on Linux/macOS..."
                          $version = (Invoke-RestMethod -Uri "https://checkpoint-api.hashicorp.com/v1/check/packer").current_version
                          $zipUrl = "https://releases.hashicorp.com/packer/$version/packer_${version}_linux_amd64.zip"
                          $zipPath = "./packer.zip"

                          curl -fsSL $zipUrl -o $zipPath
                          unzip $zipPath
                          sudo mv packer /usr/local/bin/
                          rm $zipPath
                          Write-Host "Packer installed successfully."
                        }
                        else {
                          Write-Host "Packer already installed on Linux/macOS."
                        }
                      }

                # ✅ Verify Packer installation (Cross-platform)
                - task: PowerShell@2
                  displayName: "Verify Packer Installation (Cross-platform)"
                  inputs:
                    targetType: "inline"
                    script: |
                      Write-Host "Verifying Packer installation..."
                      if ($env:AGENT_OS -eq "Windows_NT") {
                        packer -v
                      }
                      else {
                        bash -c "packer version"
                      }

                # ✅ Replace Tokens (if applicable)
                - task: replacetokens@6
                  displayName: "Replace Tokens in Packer Variables"
                  inputs:
                    targetFiles: "${{ parameters.workingDirectory }}/variables/${{ parameters.imageName }}.pkrvars.hcl"
                    tokenPattern: "custom"
                    tokenPrefix: "__"
                    tokenSuffix: "__"
                    actionOnMissing: "warn"
                    keepToken: false

                # ✅ Initialize Packer backend with parameterized HCL file
                - script: |
                    packer init ${{ parameters.workingDirectory }}/${{ parameters.packerTemplateFile }}
                  displayName: "Packer Init"

                # ✅ Validate the Packer template with parameterized HCL file
                - script: |
                    cd ${{ parameters.workingDirectory }}
                    packer validate -var-file=variables/${{ parameters.imageName }}.pkrvars.hcl ${{ parameters.packerTemplateFile }}
                  displayName: "Packer Validate"

                # ✅ Build the Packer Image with parameterized HCL file
                - script: |
                    cd ${{ parameters.workingDirectory }}
                    packer build -var-file=variables/${{ parameters.imageName }}.pkrvars.hcl ${{ parameters.packerTemplateFile }}
                  displayName: "Packer Build"

                # ✅ Cross-platform Cleanup Step
                - task: PowerShell@2
                  displayName: "Force Cleanup of Working Directory Contents (Cross-platform)"
                  condition: always()
                  inputs:
                    targetType: "inline"
                    script: |
                      Write-Host "Operating System: $env:AGENT_OS"
                      Write-Host "Cleaning working directory: '${{ parameters.workingDirectory }}'"
                
                      if ($env:AGENT_OS -eq "Windows_NT") {
                        Write-Host "Running on Windows..."
                        Get-ChildItem -Path "${{ parameters.workingDirectory }}" -Force | Remove-Item -Recurse -Force
                      }
                      else {
                        Write-Host "Running on Linux/macOS..."
                        bash -c "rm -rf '${{ parameters.workingDirectory }}'/* '${{ parameters.workingDirectory }}'/.[!.]* '${{ parameters.workingDirectory }}'/..?*" 
                      }
                
                      Write-Host "Cleanup complete."